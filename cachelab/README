# 模拟Cache实现 注意点
- 本人代码没参考别人代码，可能有些许不同或并不巧妙的设计，追求的是可读性
- 变量名命名完全参考CSAPP书中的 E S B t s b等变量含义
- 缓存行冲突时的替换算法：Random, LFU, LRU 均已在代码中实现
- LRU不能用time(NULL)获取的时间戳比较缓存行的先后顺序，单位是秒，精度不足
- cache定义如下 可缓存字节数：`C = S*E*B` . cache下是组 行 块， 都用malloc分配空间。
    ```c
    struct Cache {
        /*   C = S*E*B   */
        int 		    S;
        int 		    E;
        int 		    B;

        int		        s;
        int		        b;
        int 		    t;
        struct Group 	*groups;
    };
    ```
- 缓存行实现如下
    ```c
    struct Line {
        char 			    *block;     // 块
        char 			    valid;      // 有效标志
        unsigned int		last;       // LRU 上一次使用时间 每执行一条trace文件中的指令 时间加1
        unsigned int		count;      // LFU 使用次数
        unsigned long int 	tag;        // 标志位 标识一个缓存行
    };
    ```

- 使用LRU测试可得27分满分，使用LFU可得18分， 使用Random可得18~27分
    ```LRU
                            Your simulator     Reference simulator
    Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
        3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
        3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
        3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
        3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
        3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace
        3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace
        3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace
        6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace
        27

    TEST_CSIM_RESULTS=27
    ```


# 矩阵转置命中率提升，可用分块完成，时间和工作方向关系，后续有时间选做。



########## Official README #####################

Before running the autograders, compile your code:
    linux> make

Check the correctness of your simulator:
    linux> ./test-csim

Check the correctness and performance of your transpose functions:
    linux> ./test-trans -M 32 -N 32
    linux> ./test-trans -M 64 -N 64
    linux> ./test-trans -M 61 -N 67

Check everything at once (this is the program that your instructor runs):
    linux> ./driver.py    

# You will modifying and handing in these two files
csim.c       Your cache simulator
trans.c      Your transpose function

# Tools for evaluating your simulator and transpose function
Makefile     Builds the simulator and tools
README       This file
driver.py*   The driver program, runs test-csim and test-trans
cachelab.c   Required helper functions
cachelab.h   Required header file
csim-ref*    The executable reference cache simulator
test-csim*   Tests your cache simulator
test-trans.c Tests your transpose function
tracegen.c   Helper program used by test-trans
traces/      Trace files used by test-csim.c

